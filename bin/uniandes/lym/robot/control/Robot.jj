/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traduccion DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretacion
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	HashMap<String,Integer> variables = new HashMap<String,Integer>();
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
        < MI: ["a"-"z"] >
        | 	<T_MOVER:  "move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		|   < ROBOT: "ROBOT_R">
		|   < VARS: "VARS "< MI >" , " < MI >>
		|   <ASSIGN :"assign" >
		|   <TURN : "turn" >
		|   <FACE: "face">
		|   <MOVE_DIR:"moveDir">
		|   <MOVE_IN_DIR:"moveInDir">
		|   <WORD: (< MI >)* >
		|   <FACING: "facing" >
		|   < NOT: "not" >
		|   <END :"END" >

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x= 0;
		String salida=new String();
		
	}
	
	{
		(
		  < ROBOT > < VARS> <WORD> options(salida) < WORD >
		)  
 
		{
		    try {
	    			        Thread.sleep(2000);
	    			    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    			    }
	    			 
			sistema.append(salida);
			return true;
		}

		

		| <EOF> {return false;} 
	}

	void objetoPoner(String a, int x) :
	{
		int f=1;
			
	}
	{
	  {
	    if (a.equals("chip"))
	   {
         world.putChips(x);
	    }
	    else {
	       world.putBalloons(x);
	       
	 }

	}
}

	void objetoRecoger(String a, int x) :
	{
		int f=1;	
	}
	{
	  {
	    if (a.equals("chip"))
	   {
         world.pickChips(x);
	    }
	    else {
	       world.grabBalloons(x);
	       
	 }
	 }

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener digitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Numero demasiado grande: "+token.image+"!!");
			}
			return total;
		}
	}

	String letter():
	{String s = "";}

	{
	  < MI >{ 
	  s = token.image;
	  return s;
	}
	}

String num():
	{String s = "";}

	{
	  < NUMERO >{ 
	  s = token.image;
	  return s;
	}
	}

	String word():
	{String w = ""; }
	{
	  < WORD >
	  {
      w = token.image;
      return w;
	    }
	}

   void turn (String s):
   { }
   {
   {
  
  if (s.equalsIgnoreCase("right")) {
   world.turnRight();
     
   }
   else if (s.equalsIgnoreCase("left")) {
     world.turnRight();
     world.turnRight();
     world.turnRight();
   }
 }
}
  void face (String s):
   { boolean b = false;}
   {
   {
  
  if (s.equalsIgnoreCase("north")) {
    while(b == false) {
      if (world.facingNorth()) {

        b = true;

        }
     else { 
          world.turnRight();
        }
     }
     
}
   else if (s.equalsIgnoreCase("south")) {
    while(b == false) {
      if (world.facingSouth()) {

        b = true;

        }
   else {
          world.turnRight();
        }
     }
     
}

else if (s.equalsIgnoreCase("east")) {
    while(b == false) {
      if (world.facingEast()) {

        b = true;

        }
   else { 
          world.turnRight();
        }
     }
     
}

else if (s.equalsIgnoreCase("west")) {
    while(b ==false) {
      if (world.facingWest()) {

        b = true;

        }
   else { 
          world.turnRight();
        }
     }
     
   }
 }
}

void assign(String a ,int x):
{}
{
{
   variables.put(a,x); 
} 
}

void move(String a):
{int x = 1;}
{
{
  if(variables.containsKey(a)) {
   x = variables.get(a);
 }
world.moveForward(x);

  
} 
}

void moveDir(int z, String dir):
{ String back = ""; }
{
  {
    if(world.facingNorth()) {
      back = "North";
    }
    else if(world.facingSouth()) {
      back = "South";
    }
    else if(world.facingWest()) {
      back = "West)";
    }
    else if(world.facingEast()) {
      back = "East";
    }
      	
    	if(dir.equalsIgnoreCase("right")){
    		if(world.facingEast()){
    		world.moveHorizontally(z);
    		}
    		else {
    			int n= 0;
    			while(world.facingEast()== false){
    				world.turnRight();
    				n++;
    			}
    			world.moveHorizontally(z);
    			turn(back);
    		}
    	}
    	else if(dir.equalsIgnoreCase("left")){
    		if(world.facingWest()){
        		world.moveHorizontally(z);
        		}
        		else {
        			int n= 0;
        			while(world.facingWest() == false){
        				world.turnRight();
        				n++;
        			}
        			world.moveHorizontally(z);
        			turn(back);
        		}
    	}
        else if(dir.equalsIgnoreCase("front")){
        	if(world.facingEast() || world.facingWest()){
        		world.moveHorizontally(z);
        	}
        	else {
        		world.moveVertically(z);
        	}
    	}
        else {
        	if(world.facingEast()){
        		int n= 0;
    			while(world.facingWest() == false){
    				world.turnRight();
    				n++;
    			}
    			world.moveHorizontally(z);
    			turn(back);
        	}
        	else if(world.facingWest()){
        		int n= 0;
    			while(world.facingEast()== false){
    				world.turnRight();
    				n++;
    			}
    			world.moveHorizontally(z);
    			turn(back);
        	}
        	else if (world.facingNorth()){
            		int n= 0;
        			while(world.facingSouth() == false){
        				world.turnRight();
        				n++;
        			}
        			world.moveVertically(z);;
        			turn(back);
        	}
        	else {
        		int n= 0;
    			while(world.facingNorth()== false){
    				world.turnRight();
    				n++;
    			}
    			world.moveVertically(z);;
    			turn(back);
        	}
        }
      }
    }

    boolean facing(String s):
    { boolean b = false;}
    {
         {
             if (s.equals("north")) {
              b = world.facingNorth();
               
             }
             else if (s.equals("south")) {
              b = world.facingSouth();
               
             }
             else  if (s.equals("west")) {
              b = world.facingWest();
               
             }
             else if (s.equals("east")) {
              b = world.facingEast();
               
             }
     
              return b;
           
         }
      
    }

    void moveInDir(String x, String face):
    { int num = 0;}
    {
     {
        face(face);
        num = variables.get(x);
        world.moveForward(num);
      }

      }

	void comands(String sistem):
	{
     String a;
     String c;
     int x;
     boolean b;
	   }
	{

	  (
	       <T_TURNRIGHT> "(" ")"" ;" {world.turnRight();}
		|  <T_MOVER>  "(" (a = letter() | a = num()) ")"" ;"  {move(a); }  
		|  <T_PONER> "("  x = numero() " ," a = word() ")"" ;"  {objetoPoner(a,x);}					  			
		|  <T_RECOGER> "("   x = numero() " ," a = word()  ")"" ;" 	{objetoRecoger(a,x);}
		|  <ASSIGN> "(" a = letter() " ," x = numero() ")" " ;" {assign(a,x); }
		|  <TURN> "(" a =  word() ")"" ;"  {turn(a);}
		|  <FACE> "(" a = word() ")"" ;"  { face(a);}
		|  <MOVE_DIR> "(" x = numero() " ," a = word() ")"" ;"  {moveDir(x,a); }
		|  <MOVE_IN_DIR>  "(" c = letter()" ," a = word()  ")"" ;"  {moveInDir(c,a); }
		|  not(sistem)
		
	  )
}	

void options(String sistem): { }
{
  (corchete(sistem) | comands(sistem) | cuadrado(sistem))*
}

void corchete(String sistem):{
     String a;
     String c;
     int x;}
{
  "{"
 (comands(sistem))*
 
 "}"
}

void cuadrado(String sistem):{
     String a;
     String c;
     int x;}
{
  "["
 (comands(sistem))*

 "]"
}

void not(String sistem): {
  String a;
  boolean b; }
{
 "not ""("<WORD > "(" a = word() ")"")"" ;"  {
    b = facing(a);

     if (b == false )
   sistem = "Not facing that direction";
    }
}




